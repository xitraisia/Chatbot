"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;
var _axiosError = _interopRequireDefault(require("axios-error"));
var _axios = _interopRequireDefault(require("axios"));
var _debug = _interopRequireDefault(require("debug"));
var _imageType = _interopRequireDefault(require("image-type"));
var _invariant = _interopRequireDefault(require("invariant"));
var _lodash = _interopRequireDefault(require("lodash.omit"));
var _urlJoin = _interopRequireDefault(require("url-join"));

var _Line = _interopRequireDefault(require("./Line"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





































function handleError(err) {
  if (err.response && err.response.data) {
    const { message, details } = err.response.data;
    let msg = `LINE API - ${message}`;
    if (details && details.length > 0) {
      details.forEach(detail => {
        msg += `\n- ${detail.property}: ${detail.message}`;
      });
    }
    throw new _axiosError.default(msg, err);
  }
  throw new _axiosError.default(err.message, err);
}

const debugRequest = (0, _debug.default)('messaging-api-line');

function onRequest({ method, url, body }) {
  debugRequest(`${method} ${url}`);
  if (body) {
    debugRequest('Outgoing request body:');
    debugRequest(JSON.stringify(body, null, 2));
  }
}

class LineClient {
  static connect(
  accessTokenOrConfig,
  channelSecret)
  {
    return new LineClient(accessTokenOrConfig, channelSecret);
  }











  constructor(
  accessTokenOrConfig,
  channelSecret)
  {_defineProperty(this, "_accessToken", void 0);_defineProperty(this, "_channelSecret", void 0);_defineProperty(this, "_onRequest", void 0);_defineProperty(this, "_axios", void 0);_defineProperty(this, "_dataAxios", void 0);
    let origin;
    let dataOrigin;
    if (accessTokenOrConfig && typeof accessTokenOrConfig === 'object') {
      const config = accessTokenOrConfig;

      this._accessToken = config.accessToken;
      this._channelSecret = config.channelSecret;
      this._onRequest = config.onRequest || onRequest;
      origin = config.origin;
      dataOrigin = config.dataOrigin;
    } else {
      this._accessToken = accessTokenOrConfig;
      this._channelSecret = channelSecret;
      this._onRequest = onRequest;
    }

    this._axios = _axios.default.create({
      baseURL: `${origin || 'https://api.line.me'}/`,
      headers: {
        Authorization: `Bearer ${this._accessToken}`,
        'Content-Type': 'application/json' } });



    this._axios.interceptors.request.use(config => {
      this._onRequest({
        method: config.method,
        url: (0, _urlJoin.default)(config.baseURL, config.url),
        headers: _objectSpread({},
        config.headers.common, {},
        config.headers[config.method], {},
        (0, _lodash.default)(config.headers, [
        'common',
        'get',
        'post',
        'put',
        'patch',
        'delete',
        'head'])),


        body: config.data });

      return config;
    });

    this._dataAxios = _axios.default.create({
      baseURL: `${dataOrigin || 'https://api-data.line.me'}/`,
      headers: {
        Authorization: `Bearer ${this._accessToken}`,
        'Content-Type': 'application/json' } });



    this._dataAxios.interceptors.request.use(config => {
      this._onRequest({
        method: config.method,
        url: (0, _urlJoin.default)(config.baseURL, config.url),
        headers: _objectSpread({},
        config.headers.common, {},
        config.headers[config.method], {},
        (0, _lodash.default)(config.headers, [
        'common',
        'get',
        'post',
        'put',
        'patch',
        'delete',
        'head'])),


        body: config.data });

      return config;
    });
  }

  get axios() {
    return this._axios;
  }

  get dataAxios() {
    return this._dataAxios;
  }

  get accessToken() {
    return this._accessToken;
  }

  _send(
  type,
  target,
  ...args)
  {
    if (type === 'push') {
      return this.push(target, ...args);
    }
    if (type === 'multicast') {
      return this.multicast(target, ...args);
    }
    return this.reply(target, ...args);
  }

  _sendText(
  type,
  target,
  text,
  options)
  {
    return this._send(
    type,
    target,
    [_Line.default.createText(text, options || {})],
    options);

  }

  _sendImage(
  type,
  target,
  contentUrlOrImage,
  previewUrlOrOptions)
  {
    return this._send(
    type,
    target,
    [_Line.default.createImage(contentUrlOrImage, previewUrlOrOptions)],
    typeof previewUrlOrOptions === 'string' ? undefined : previewUrlOrOptions);

  }

  _sendVideo(
  type,
  target,
  contentUrlOrVideo,
  previewUrlOrOptions)
  {
    return this._send(
    type,
    target,
    [_Line.default.createVideo(contentUrlOrVideo, previewUrlOrOptions || {})],
    typeof previewUrlOrOptions === 'string' ? undefined : previewUrlOrOptions);

  }

  _sendAudio(
  type,
  target,
  contentUrlOrAudio,
  durationOrOptions)
  {
    return this._send(
    type,
    target,
    [_Line.default.createAudio(contentUrlOrAudio, durationOrOptions || {})],
    typeof durationOrOptions === 'number' ? undefined : durationOrOptions);

  }

  _sendLocation(
  type,
  target,
  { title, address, latitude, longitude },
  options)
  {
    return this._send(
    type,
    target,
    [
    _Line.default.createLocation(
    {
      title,
      address,
      latitude,
      longitude },

    options || {})],


    options);

  }

  _sendSticker(
  type,
  target,
  packageIdOrSticker,
  stickerIdOrOptions)
  {
    return this._send(
    type,
    target,
    [_Line.default.createSticker(packageIdOrSticker, stickerIdOrOptions || {})],
    typeof stickerIdOrOptions === 'string' ? undefined : stickerIdOrOptions);

  }

  /**
     * Imagemap Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#imagemap-message
     */
  _sendImagemap(
  type,
  target,
  altText,
  {
    baseUrl,
    baseSize,
    baseHeight,
    baseWidth,
    video,
    actions },











  options)
  {
    return this._send(
    type,
    target,
    [
    _Line.default.createImagemap(
    altText,
    {
      baseUrl,
      baseSize,
      baseHeight,
      baseWidth,
      video,
      actions },

    options || {})],


    options);

  }

  /**
     * Flex Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#flex-message
     */
  _sendFlex(
  type,
  target,
  altText,
  contents,
  options)
  {
    return this._send(
    type,
    target,
    [_Line.default.createFlex(altText, contents, options || {})],
    options);

  }

  /**
     * Template Messages
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#template-messages
     */
  _sendTemplate(
  type,
  target,
  altText,
  template,
  options)
  {
    return this._send(
    type,
    target,
    [_Line.default.createTemplate(altText, template, options || {})],
    options);

  }

  _sendButtonTemplate(
  type,
  target,
  altText,
  {
    thumbnailImageUrl,
    imageAspectRatio,
    imageSize,
    imageBackgroundColor,
    title,
    text,
    defaultAction,
    actions },










  options)
  {
    return this._send(
    type,
    target,
    [
    _Line.default.createButtonTemplate(
    altText,
    {
      thumbnailImageUrl,
      imageAspectRatio,
      imageSize,
      imageBackgroundColor,
      title,
      text,
      defaultAction,
      actions },

    options || {})],


    options);

  }

  _sendConfirmTemplate(
  type,
  target,
  altText,
  {
    text,
    actions },




  options)
  {
    return this._send(
    type,
    target,
    [
    _Line.default.createConfirmTemplate(
    altText,
    {
      text,
      actions },

    options || {})],


    options);

  }

  _sendCarouselTemplate(
  type,
  target,
  altText,
  columns,
  _ref =







  {})
  {let { imageAspectRatio, imageSize } = _ref,options = _objectWithoutProperties(_ref, ["imageAspectRatio", "imageSize"]);
    return this._send(
    type,
    target,
    [
    _Line.default.createCarouselTemplate(altText, columns, _objectSpread({
      imageAspectRatio,
      imageSize },
    options))],


    options);

  }

  _sendImageCarouselTemplate(
  type,
  target,
  altText,
  columns,
  options)
  {
    return this._send(
    type,
    target,
    [_Line.default.createImageCarouselTemplate(altText, columns, options || {})],
    options);

  }

  /**
     * Reply Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#send-reply-message
     */
  replyRawBody(
  body,



  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    post(
    '/v2/bot/message/reply',
    body,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  reply(
  replyToken,
  messages,
  options = {})
  {
    return this.replyRawBody({ replyToken, messages }, options);
  }

  /**
     * Push Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#send-push-message
     */
  pushRawBody(
  body,



  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    post(
    '/v2/bot/message/push',
    body,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  push(
  to,
  messages,
  options = {})
  {
    return this.pushRawBody({ to, messages }, options);
  }

  /**
     * Multicast
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#send-multicast-messages
     */
  multicastRawBody(
  body,



  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    post(
    '/v2/bot/message/multicast',
    body,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  multicast(
  to,
  messages,
  options = {})
  {
    return this.multicastRawBody({ to, messages }, options);
  }

  /**
     * Content
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-content
     */
  retrieveMessageContent(
  messageId,
  { accessToken: customAccessToken } = {})
  {
    return this._dataAxios.
    get(`/v2/bot/message/${messageId}/content`, _objectSpread({
      responseType: 'arraybuffer' },
    customAccessToken ?
    { headers: { Authorization: `Bearer ${customAccessToken}` } } :
    undefined)).

    then(res => res.data, handleError);
  }

  /**
     * Get User Profile
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-profile
     * displayName, userId, pictureUrl, statusMessage
     */
  getUserProfile(
  userId,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    get(
    `/v2/bot/profile/${userId}`,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError).
    catch(err => {
      if (err.response && err.response.status === 404) {
        return null;
      }
      handleError(err);
    });
  }

  /**
     * Get Group Member Profile
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-group-member-profile
     */
  getGroupMemberProfile(
  groupId,
  userId,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    get(
    `/v2/bot/group/${groupId}/member/${userId}`,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  /**
     * Get Room Member Profile
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-room-member-profile
     */
  getRoomMemberProfile(
  roomId,
  userId,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    get(
    `/v2/bot/room/${roomId}/member/${userId}`,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  /**
     * Get Group Member IDs
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-group-member-user-ids
     */
  getGroupMemberIds(
  groupId,
  start,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    get(
    `/v2/bot/group/${groupId}/members/ids${start ? `?start=${start}` : ''}`,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  async getAllGroupMemberIds(
  groupId,
  options = {})
  {
    let allMemberIds = [];
    let continuationToken;

    do {
      // eslint-disable-next-line no-await-in-loop
      const { memberIds, next } = await this.getGroupMemberIds(
      groupId,
      continuationToken,
      options);

      allMemberIds = allMemberIds.concat(memberIds);
      continuationToken = next;
    } while (continuationToken);

    return allMemberIds;
  }

  /**
     * Get Room Member IDs
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-room-member-user-ids
     */
  getRoomMemberIds(
  roomId,
  start,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    get(
    `/v2/bot/room/${roomId}/members/ids${start ? `?start=${start}` : ''}`,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  async getAllRoomMemberIds(
  roomId,
  options = {})
  {
    let allMemberIds = [];
    let continuationToken;

    do {
      // eslint-disable-next-line no-await-in-loop
      const { memberIds, next } = await this.getRoomMemberIds(
      roomId,
      continuationToken,
      options);

      allMemberIds = allMemberIds.concat(memberIds);
      continuationToken = next;
    } while (continuationToken);

    return allMemberIds;
  }

  /**
     * Leave Group
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#leave-group
     */
  leaveGroup(
  groupId,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    post(
    `/v2/bot/group/${groupId}/leave`,
    null,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  /**
     * Leave Room
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#leave-room
     */
  leaveRoom(
  roomId,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    post(
    `/v2/bot/room/${roomId}/leave`,
    null,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  /**
     * Rich Menu
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#rich-menu
     */
  getRichMenuList({
    accessToken: customAccessToken } =
  {}) {
    return this._axios.
    get(
    '/v2/bot/richmenu/list',
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data.richmenus, handleError);
  }

  getRichMenu(
  richMenuId,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    get(
    `/v2/bot/richmenu/${richMenuId}`,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data).
    catch(err => {
      if (err.response && err.response.status === 404) {
        return null;
      }
      handleError(err);
    });
  }

  createRichMenu(
  richMenu,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    post(
    '/v2/bot/richmenu',
    richMenu,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  deleteRichMenu(
  richMenuId,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    delete(
    `/v2/bot/richmenu/${richMenuId}`,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  getLinkedRichMenu(
  userId,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    get(
    `/v2/bot/user/${userId}/richmenu`,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data).
    catch(err => {
      if (err.response && err.response.status === 404) {
        return null;
      }
      handleError(err);
    });
  }

  linkRichMenu(
  userId,
  richMenuId,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    post(
    `/v2/bot/user/${userId}/richmenu/${richMenuId}`,
    null,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  unlinkRichMenu(
  userId,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    delete(
    `/v2/bot/user/${userId}/richmenu`,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  getDefaultRichMenu({
    accessToken: customAccessToken } =
  {}) {
    return this._axios.
    get(
    `/v2/bot/user/all/richmenu`,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data).
    catch(err => {
      if (err.response && err.response.status === 404) {
        return null;
      }
      handleError(err);
    });
  }

  setDefaultRichMenu(
  richMenuId,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    post(
    `/v2/bot/user/all/richmenu/${richMenuId}`,
    null,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  deleteDefaultRichMenu({
    accessToken: customAccessToken } =
  {}) {
    return this._axios.
    delete(
    `/v2/bot/user/all/richmenu`,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  /**
     * - Images must have one of the following resolutions: 2500x1686, 2500x843.
     * - You cannot replace an image attached to a rich menu.
     *   To update your rich menu image, create a new rich menu object and upload another image.
     */
  uploadRichMenuImage(
  richMenuId,
  image,
  { accessToken: customAccessToken } = {})
  {
    const type = (0, _imageType.default)(image);
    (0, _invariant.default)(
    type && (type.mime === 'image/jpeg' || type.mime === 'image/png'),
    'Image must be `image/jpeg` or `image/png`');

    return this._dataAxios.
    post(`/v2/bot/richmenu/${richMenuId}/content`, image, {
      headers: customAccessToken ?
      {
        'Content-Type': type.mime,
        Authorization: `Bearer ${customAccessToken}` } :

      {
        'Content-Type': type.mime } }).


    then(res => res.data, handleError);
  }

  downloadRichMenuImage(
  richMenuId,
  { accessToken: customAccessToken } = {})
  {
    return this._dataAxios.
    get(
    `/v2/bot/richmenu/${richMenuId}/content`,
    customAccessToken ?
    {
      responseType: 'arraybuffer',
      headers: {
        Authorization: `Bearer ${customAccessToken}` } } :


    {
      responseType: 'arraybuffer' }).


    then(res => Buffer.from(res.data)).
    catch(err => {
      if (err.response && err.response.status === 404) {
        return null;
      }
      handleError(err);
    });
  }

  /**
     * Account link
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#account-link
     */

  issueLinkToken(
  userId,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    post(
    `/v2/bot/user/${userId}/linkToken`,
    null,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  /**
     * LINE Front-end Framework (LIFF)
     *
     * https://developers.line.me/en/docs/liff/reference/#add-liff-app
     */
  getLiffAppList({
    accessToken: customAccessToken } =
  {})


  {
    return this._axios.
    get(
    '/liff/v1/apps',
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data.apps, handleError);
  }

  createLiffApp(
  view,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    post(
    '/liff/v1/apps',
    view,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  updateLiffApp(
  liffId,
  view,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    put(
    `/liff/v1/apps/${liffId}/view`,
    view,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }

  deleteLiffApp(
  liffId,
  { accessToken: customAccessToken } = {})
  {
    return this._axios.
    delete(
    `/liff/v1/apps/${liffId}`,
    customAccessToken && {
      headers: { Authorization: `Bearer ${customAccessToken}` } }).


    then(res => res.data, handleError);
  }}exports.default = LineClient;


const sendTypes = ['reply', 'push', 'multicast'];

const messageTypes =


[
{ name: 'Text' },
{ name: 'Image' },
{ name: 'Video' },
{ name: 'Audio' },
{ name: 'Location' },
{ name: 'Sticker' },
{ name: 'Imagemap' },
{ name: 'Flex' },
{ name: 'Template' },
{ name: 'ButtonTemplate', aliases: ['ButtonsTemplate'] },
{ name: 'ConfirmTemplate' },
{ name: 'CarouselTemplate' },
{ name: 'ImageCarouselTemplate' }];


messageTypes.forEach(({ name, aliases }) => {
  sendTypes.forEach(sendType => {
    [name].concat(aliases || []).forEach(type => {
      Object.defineProperty(LineClient.prototype, `${sendType}${type}`, {
        enumerable: false,
        configurable: true,
        writable: true,
        value(target, ...args) {
          return this[`_send${name}`](sendType, target, ...args);
        } });

    });
  });
});