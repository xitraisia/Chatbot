'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};
var _querystring = require('querystring');var _querystring2 = _interopRequireDefault(_querystring);

var _axiosError = require('axios-error');var _axiosError2 = _interopRequireDefault(_axiosError);
var _axios = require('axios');var _axios2 = _interopRequireDefault(_axios);
var _invariant = require('invariant');var _invariant2 = _interopRequireDefault(_invariant);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}


















function handleError(err) {
  if (err.response && err.response.data) {var _err$response$data =
    err.response.data;const returnCode = _err$response$data.returnCode,returnMessage = _err$response$data.returnMessage;
    const msg = `LINE PAY API - ${returnCode} ${returnMessage}`;
    throw new _axiosError2.default(msg, err);
  }
  throw new _axiosError2.default(err.message, err);
}

function throwWhenNotSuccess(res) {
  if (res.data.returnCode !== '0000') {var _res$data =
    res.data;const returnCode = _res$data.returnCode,returnMessage = _res$data.returnMessage;
    const msg = `LINE PAY API - ${returnCode} ${returnMessage}`;
    throw new _axiosError2.default(msg);
  }
  return res.data.info;
}

class LinePay {
  static connect(config) {
    return new LinePay(config);
  }



  constructor({
    channelId,
    channelSecret,
    sandbox = false,
    origin })
  {
    const linePayOrigin = sandbox ?
    'https://sandbox-api-pay.line.me' :
    'https://api-pay.line.me';

    this._axios = _axios2.default.create({
      baseURL: `${origin || linePayOrigin}/v2/`,
      headers: {
        'Content-Type': 'application/json',
        'X-LINE-ChannelId': channelId,
        'X-LINE-ChannelSecret': channelSecret } });


  }

  get axios() {
    return this._axios;
  }

  getPayments({
    transactionId,
    orderId } =



  {}) {
    (0, _invariant2.default)(
    transactionId || orderId,
    'getPayments: One of `transactionId` or `orderId` must be provided');


    const query = {};

    if (transactionId) {
      query.transactionId = transactionId;
    }

    if (orderId) {
      query.orderId = orderId;
    }

    return this._axios.
    get(`/payments?${_querystring2.default.stringify(query)}`).
    then(throwWhenNotSuccess, handleError);
  }

  getAuthorizations({
    transactionId,
    orderId } =



  {}) {
    (0, _invariant2.default)(
    transactionId || orderId,
    'getAuthorizations: One of `transactionId` or `orderId` must be provided');


    const query = {};

    if (transactionId) {
      query.transactionId = transactionId;
    }

    if (orderId) {
      query.orderId = orderId;
    }

    return this._axios.
    get(`/payments/authorizations?${_querystring2.default.stringify(query)}`).
    then(throwWhenNotSuccess, handleError);
  }

  reserve(_ref)
























  {let productName = _ref.productName,amount = _ref.amount,currency = _ref.currency,confirmUrl = _ref.confirmUrl,orderId = _ref.orderId,options = _objectWithoutProperties(_ref, ['productName', 'amount', 'currency', 'confirmUrl', 'orderId']);
    return this._axios.
    post('/payments/request', _extends({
      productName,
      amount,
      currency,
      confirmUrl,
      orderId },
    options)).

    then(throwWhenNotSuccess, handleError);
  }

  confirm(
  transactionId,
  {
    amount,
    currency })




  {
    return this._axios.
    post(`/payments/${transactionId}/confirm`, {
      amount,
      currency }).

    then(throwWhenNotSuccess, handleError);
  }

  capture(
  transactionId,
  {
    amount,
    currency })




  {
    return this._axios.
    post(`/payments/authorizations/${transactionId}/capture`, {
      amount,
      currency }).

    then(throwWhenNotSuccess, handleError);
  }

  void(transactionId) {
    return this._axios.
    post(`/payments/authorizations/${transactionId}/void`).
    then(throwWhenNotSuccess, handleError);
  }

  refund(transactionId, options = {}) {
    return this._axios.
    post(`/payments/${transactionId}/refund`, options).
    then(throwWhenNotSuccess, handleError);
  }}exports.default = LinePay;