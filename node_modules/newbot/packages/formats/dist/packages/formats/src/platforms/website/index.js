"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var platform_1 = require("../platform");
var WebFormat = /** @class */ (function (_super) {
    __extends(WebFormat, _super);
    function WebFormat(text, session, user) {
        return _super.call(this, text, session, user) || this;
    }
    WebFormat.prototype.quickReplies = function (actions) {
        var _this = this;
        actions = actions.map(function (action) { return _this.toByLang(action); });
        return {
            text: this.text,
            actions: actions
        };
    };
    WebFormat.prototype.buttons = function (buttons) {
        var _this = this;
        return {
            text: this.text,
            buttons: buttons.map(function (b) { return _this.mapButton(b); })
        };
    };
    WebFormat.prototype.location = function (latitude, longitude) {
        return {
            text: this.text,
            location: {
                latitude: latitude,
                longitude: longitude
            }
        };
    };
    WebFormat.prototype.contact = function (phone, name) {
        return {
            text: this.text,
            contact: {
                phone: phone,
                name: name
            }
        };
    };
    WebFormat.prototype.phone = function () {
        return {
            text: this.text,
            phone: true
        };
    };
    WebFormat.prototype.image = function (url) {
        return {
            text: this.text,
            image: url
        };
    };
    WebFormat.prototype.video = function (url) {
        return {
            text: this.text,
            video: url
        };
    };
    WebFormat.prototype.carousel = function (cards) {
        return {
            text: this.text,
            cards: cards
        };
    };
    WebFormat.prototype.webview = function (params) {
        if (params === void 0) { params = {}; }
        var url = this.webviewUrl(params);
        return {
            text: this.text,
            webview: {
                url: url,
                height: params.height
            }
        };
    };
    return WebFormat;
}(platform_1.PlatformFormat));
exports.WebFormat = WebFormat;
