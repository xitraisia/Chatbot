"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var platform_1 = require("../platform");
var TwitterFormat = /** @class */ (function (_super) {
    __extends(TwitterFormat, _super);
    function TwitterFormat(text, session, user) {
        return _super.call(this, text, session, user) || this;
    }
    TwitterFormat.prototype.image = function (contentUrl, contentType) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = {
                            text: this.text,
                            attachment: {
                                type: 'media'
                            }
                        };
                        _b = {
                            url: contentUrl
                        };
                        return [4 /*yield*/, this.sizeFile(contentUrl)];
                    case 1: return [2 /*return*/, (_a._data = (_b.size = _c.sent(),
                            _b.type = contentType,
                            _b.category = 'dm_image',
                            _b),
                            _a)];
                }
            });
        });
    };
    TwitterFormat.prototype.buttons = function (buttons) {
        var _this = this;
        var buttonsClone = buttons.map(function (b) {
            b = _this.mapButton(b);
            switch (b.type) {
                case 'url':
                case 'web_url':
                    return {
                        type: 'web_url',
                        url: b.url,
                        label: b.title
                    };
                case 'share':
                    if (!b.tweet) {
                        console.warn('Specify "tweet" property to use shared button on twitter platform');
                        return;
                    }
                    var _a = b.tweet, url = _a.url, text = _a.text, via = _a.via, hashtags = _a.hashtags;
                    if (text) {
                        text = "text=" + text;
                    }
                    if (url) {
                        url = "&url=" + url;
                    }
                    if (via) {
                        via = "&via=" + via;
                    }
                    if (hashtags) {
                        hashtags = "&hashtags=" + hashtags.split(',');
                    }
                    return {
                        type: 'web_url',
                        url: "https://twitter.com/intent/tweet?" + url + via + text + hashtags,
                        label: b.title || _this.getByLang({
                            fr_FR: 'Partager',
                            en_EN: 'Share'
                        })
                    };
            }
        });
        return {
            text: this.text,
            ctas: buttonsClone
        };
    };
    TwitterFormat.prototype.quickReplies = function (actions) {
        var _this = this;
        actions = actions.map(function (action) {
            if (typeof action == 'string') {
                return {
                    label: action
                };
            }
            action = _this.toByLang(action);
            return {
                label: action.text,
                metadata: action.payload
            };
        });
        return {
            text: this.text,
            quick_reply: {
                type: 'options',
                options: actions
            }
        };
    };
    return TwitterFormat;
}(platform_1.PlatformFormat));
exports.TwitterFormat = TwitterFormat;
