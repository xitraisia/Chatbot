"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var querystring_1 = __importDefault(require("querystring"));
var lodash_truncate_1 = __importDefault(require("lodash.truncate"));
var Messenger_1 = __importDefault(require("messaging-api-messenger/lib/Messenger"));
var platform_1 = require("../platform");
var MessengerFormat = /** @class */ (function (_super) {
    __extends(MessengerFormat, _super);
    function MessengerFormat(text, session, user) {
        return _super.call(this, text, session, user) || this;
    }
    MessengerFormat.prototype.video = function (contentUrl) {
        return this.attachment('video', {
            url: contentUrl
        });
    };
    MessengerFormat.prototype.image = function (contentUrl) {
        return this.attachment('image', {
            url: contentUrl
        });
    };
    MessengerFormat.prototype.email = function () {
        return this.quickReplies([{
                type: 'user_email'
            }]);
    };
    MessengerFormat.prototype.phone = function () {
        return this.quickReplies([{
                type: 'user_phone_number'
            }]);
    };
    MessengerFormat.prototype.quickReplies = function (actions) {
        return Messenger_1.default.createMessage(this.text, {
            quick_replies: this.actions(actions)
        });
    };
    MessengerFormat.prototype.buttons = function (buttons) {
        var _this = this;
        var buttonsClone = buttons
            .filter(function (b) { return b; })
            .map(function (b) {
            b = _this.mapButton(b);
            switch (b.type) {
                case 'url':
                case 'web_url':
                    return {
                        type: "web_url",
                        url: b.url,
                        title: b.title
                    };
                case 'share':
                    return {
                        type: 'element_share'
                    };
                case 'postback':
                    return {
                        type: 'postback',
                        title: b.title,
                        payload: b.msg || b.title
                    };
                case 'webview':
                    return {
                        type: "web_url",
                        url: b.url,
                        title: b.title,
                        webview_height_ratio: b.height || 'full',
                        messenger_extensions: true
                    };
                case 'phone':
                    return {
                        type: 'phone_number',
                        title: b.title,
                        payload: b.phone_number
                    };
                case 'account_link':
                    return {
                        type: 'account_link',
                        url: b.url
                    };
                default:
                    return b;
            }
        });
        return this.attachment('template', {
            template_type: 'button',
            text: this.text,
            buttons: buttonsClone
        });
    };
    MessengerFormat.prototype.carousel = function (cards) {
        var _this = this;
        return this.attachment('template', {
            template_type: "generic",
            elements: cards.map(function (card) { return _this.card(card); })
        });
    };
    MessengerFormat.prototype.contact = function (phone, name) {
        return this.buttons([
            {
                type: 'phone',
                title: 'Call ' + name,
                phone_number: phone
            }
        ]);
    };
    MessengerFormat.prototype.signin = function (url) {
        return this.buttons([
            {
                type: 'account_link',
                url: url
            }
        ]);
    };
    MessengerFormat.prototype.card = function (card) {
        card = _super.prototype.card.call(this, card);
        card.buttons = this.buttons(card.buttons).attachment.payload.buttons;
        return {
            title: lodash_truncate_1.default(card.title || '(empty)', {
                length: 75,
            }),
            subtitle: lodash_truncate_1.default(card.subtitle, {
                length: 75,
            }),
            image_url: card.image,
            buttons: card.buttons
        };
    };
    MessengerFormat.prototype.actions = function (actions) {
        var _this = this;
        return actions.map(function (action) {
            if (typeof action == 'string') {
                return {
                    content_type: 'text',
                    title: action,
                    payload: action
                };
            }
            action = _this.toByLang(action);
            if (!action.type)
                action.type = 'text';
            if (action.action) {
                action.payload = "action?" + querystring_1.default.stringify(action.action);
            }
            if (!action.payload) {
                action.payload = action.text;
            }
            return {
                content_type: action.type,
                title: action.text,
                payload: action.payload,
                image_url: action.image
            };
        });
    };
    MessengerFormat.prototype.attachment = function (type, payload) {
        return {
            attachment: {
                type: type,
                payload: payload
            }
        };
    };
    return MessengerFormat;
}(platform_1.PlatformFormat));
exports.MessengerFormat = MessengerFormat;
