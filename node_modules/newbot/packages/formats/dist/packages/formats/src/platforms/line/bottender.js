"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var platform_1 = require("../platform");
var querystring_1 = __importDefault(require("querystring"));
var LineBottenderFormat = /** @class */ (function (_super) {
    __extends(LineBottenderFormat, _super);
    function LineBottenderFormat(text, session, user) {
        return _super.call(this, text, session, user) || this;
    }
    LineBottenderFormat.prototype.image = function (contentUrl) {
        return {
            method: 'replyImage',
            params: [contentUrl]
        };
    };
    LineBottenderFormat.prototype.video = function (contentUrl) {
        return {
            method: 'replyVideo',
            params: [contentUrl]
        };
    };
    LineBottenderFormat.prototype.location = function (latitude, longitude, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.title, title = _c === void 0 ? '' : _c, _d = _b.address, address = _d === void 0 ? '' : _d;
        return [
            this.text,
            {
                method: 'replyLocation',
                params: [{
                        title: title,
                        address: address,
                        latitude: latitude,
                        longitude: longitude
                    }]
            }
        ];
    };
    LineBottenderFormat.prototype.card = function (card) {
        var cardClone = {
            thumbnailImageUrl: card.image,
            title: card.title,
            text: card.subtitle
        };
        if (card.buttons) {
            cardClone.actions = this.buttons(card.buttons);
        }
        return cardClone;
    };
    LineBottenderFormat.prototype.carousel = function (cards) {
        var _this = this;
        return {
            method: 'replyCarouselTemplate',
            params: [
                this.text,
                cards.map(function (card) { return _this.card(card); })
            ]
        };
    };
    LineBottenderFormat.prototype.buttons = function (buttons) {
        var _this = this;
        var buttonsClone = buttons
            .filter(function (b) { return b; })
            .map(function (b) {
            b = _this.mapButton(b);
            switch (b.type) {
                case 'url':
                case 'web_url':
                    return {
                        type: 'uri',
                        uri: b.url,
                        label: b.title
                    };
                case 'postback':
                    return {
                        type: 'postback',
                        label: b.title,
                        data: b.msg || b.title
                    };
                default:
                    break;
            }
        });
        return buttonsClone;
    };
    LineBottenderFormat.prototype.quickReplies = function (actions) {
        var _this = this;
        actions = actions.map(function (action) {
            if (typeof action == 'string') {
                return {
                    type: 'action',
                    action: {
                        type: 'message',
                        label: action
                    }
                };
            }
            action = _this.toByLang(action);
            if (!action.type)
                action.type = 'message';
            if (action.action) {
                action.payload = "action?" + querystring_1.default.stringify(action.action);
            }
            return {
                type: 'action',
                action: {
                    type: action.type,
                    label: action.text,
                    text: action.payload
                }
            };
        });
        return {
            method: 'replyText',
            params: [
                this.text,
                {
                    items: actions
                }
            ]
        };
    };
    return LineBottenderFormat;
}(platform_1.PlatformFormat));
exports.LineBottenderFormat = LineBottenderFormat;
