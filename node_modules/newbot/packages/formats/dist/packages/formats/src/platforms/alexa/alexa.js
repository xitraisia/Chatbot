"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var platform_1 = require("../platform");
var AlexaSdkFormat = /** @class */ (function (_super) {
    __extends(AlexaSdkFormat, _super);
    function AlexaSdkFormat(text, session, user) {
        return _super.call(this, text, session, user) || this;
    }
    AlexaSdkFormat.prototype.image = function (contentUrl) {
        return {
            type: 'image',
            text: this.text,
            image: {
                smallImageUrl: contentUrl,
                largeImageUrl: contentUrl
            }
        };
    };
    AlexaSdkFormat.prototype.location = function () {
        return {
            type: 'AskForPermissionsConsent',
            permissions: ['read::alexa:device:all:address']
        };
    };
    AlexaSdkFormat.prototype.signin = function () {
        return {
            type: 'LinkAccount',
            text: this.text
        };
    };
    AlexaSdkFormat.prototype.apl = function (document, datasources) {
        return {
            type: 'Alexa.Presentation.APL.RenderDocument',
            version: '1.0',
            datasources: datasources,
            document: document
        };
    };
    AlexaSdkFormat.prototype.schema = function (name, productId) {
        return {
            type: "Connections.SendRequest",
            name: name,
            payload: {
                InSkillProduct: {
                    productId: productId
                }
            },
            token: "correlationToken"
        };
    };
    AlexaSdkFormat.prototype['Amazon.Purchase.Buy'] = function (productId) {
        return this.schema('Buy', productId);
    };
    AlexaSdkFormat.prototype['Amazon.Purchase.Cancel'] = function (productId) {
        return this.schema('Cancel', productId);
    };
    AlexaSdkFormat.extraFormats = [
        'apl',
        'Amazon.Purchase.Buy',
        'Amazon.Purchase.Cancel'
    ];
    return AlexaSdkFormat;
}(platform_1.PlatformFormat));
exports.AlexaSdkFormat = AlexaSdkFormat;
