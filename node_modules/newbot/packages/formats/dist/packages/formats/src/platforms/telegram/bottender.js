"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var platform_1 = require("../platform");
var TelegramBottenderFormat = /** @class */ (function (_super) {
    __extends(TelegramBottenderFormat, _super);
    function TelegramBottenderFormat(text, session, user) {
        return _super.call(this, text, session, user) || this;
    }
    TelegramBottenderFormat.prototype.image = function (contentUrl, contentType, name) {
        return [
            this.text,
            {
                method: 'sendPhoto',
                params: [
                    contentUrl,
                    {
                        caption: name
                    }
                ]
            }
        ];
    };
    TelegramBottenderFormat.prototype.video = function (contentUrl, contentType, name, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.thumbnail, thumbnail = _c === void 0 ? '' : _c, _d = _b.duration, duration = _d === void 0 ? '' : _d;
        return {
            method: 'sendVideo',
            params: [
                contentUrl,
                {
                    thumb: thumbnail,
                    duration: duration,
                    caption: this.text
                }
            ]
        };
    };
    TelegramBottenderFormat.prototype.contact = function (phone, name) {
        return [
            this.text,
            {
                method: 'sendContact',
                params: [{
                        first_name: name,
                        phone_number: phone
                    }]
            }
        ];
    };
    TelegramBottenderFormat.prototype.location = function (latitude, longitude) {
        return [
            this.text,
            {
                method: 'sendLocation',
                params: [{
                        latitude: latitude,
                        longitude: longitude
                    }]
            }
        ];
    };
    TelegramBottenderFormat.prototype.buttons = function (buttons) {
        var _this = this;
        var buttonsClone = buttons.map(function (b) {
            b = _this.mapButton(b);
            var obj = {
                text: b.title,
                callback_data: b.msg || b.title
            };
            switch (b.type) {
                case 'url':
                case 'web_url':
                    obj.url = b.url;
                    break;
            }
            return [obj];
        });
        return {
            method: 'sendMessage',
            params: [
                this.text,
                {
                    reply_markup: JSON.stringify({
                        inline_keyboard: buttonsClone
                    })
                }
            ]
        };
    };
    TelegramBottenderFormat.prototype.quickReplies = function (actions) {
        var _this = this;
        actions = actions.map(function (action) {
            if (typeof action == 'string') {
                return {
                    text: action
                };
            }
            action = _this.toByLang(action);
            return [{
                    text: action.text
                }];
        });
        return {
            method: 'sendMessage',
            params: [
                this.text,
                {
                    reply_markup: JSON.stringify({
                        keyboard: actions,
                        one_time_keyboard: true
                    })
                }
            ]
        };
    };
    return TelegramBottenderFormat;
}(platform_1.PlatformFormat));
exports.TelegramBottenderFormat = TelegramBottenderFormat;
