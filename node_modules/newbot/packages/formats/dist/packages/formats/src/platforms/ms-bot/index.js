"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var botbuilder_1 = require("botbuilder");
var platform_1 = require("../platform");
var lodash_last_1 = __importDefault(require("lodash.last"));
var BotBuilderFormat = /** @class */ (function (_super) {
    __extends(BotBuilderFormat, _super);
    function BotBuilderFormat(text, session, user) {
        return _super.call(this, text, session, user) || this;
    }
    BotBuilderFormat.prototype.image = function (contentUrl, contentType, name) {
        if (!name) {
            name = lodash_last_1.default(contentUrl.split('/'));
        }
        if (!contentType) {
            var ext = lodash_last_1.default(name === null || name === void 0 ? void 0 : name.split('.'));
            ext = ext.toLowerCase();
            if (['gif', 'png', 'jpeg', 'jpg'].indexOf(ext)) {
                contentType = 'image/' + ext;
            }
        }
        return this.attachment({
            name: name,
            contentType: contentType,
            contentUrl: contentUrl
        });
    };
    BotBuilderFormat.prototype.video = function (contentUrl, contentType, name) {
        if (!name) {
            name = lodash_last_1.default(contentUrl.split('/'));
        }
        return this.attachment(botbuilder_1.CardFactory.videoCard(name, [{ url: contentUrl }]));
    };
    BotBuilderFormat.prototype.buttons = function (buttons) {
        var _this = this;
        var buttonsClone = buttons.map(function (b) {
            var button = _this.toByLang(b);
            if (!button.url) {
                button.type = botbuilder_1.ActionTypes.ImBack;
                button.value = b.msg || b.title;
            }
            else {
                button.type = botbuilder_1.ActionTypes.OpenUrl;
                button.value = b.url;
            }
            return button;
        });
        return this.attachment(botbuilder_1.CardFactory.heroCard('', undefined, buttonsClone));
    };
    BotBuilderFormat.prototype.quickReplies = function (actions) {
        var _this = this;
        actions = actions.map(function (action) {
            action = _this.toByLang(action);
        });
        return botbuilder_1.MessageFactory.suggestedActions(actions, this.text);
    };
    BotBuilderFormat.prototype.adaptiveCard = function (content) {
        return this.attachment(botbuilder_1.CardFactory.adaptiveCard(content));
    };
    BotBuilderFormat.prototype.attachment = function (attachment) {
        return {
            text: this.text,
            attachments: [attachment]
        };
    };
    return BotBuilderFormat;
}(platform_1.PlatformFormat));
exports.BotBuilderFormat = BotBuilderFormat;
