"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __importDefault(require("lodash"));
var BottenderSession = /** @class */ (function () {
    function BottenderSession(context, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.platform, platform = _c === void 0 ? '' : _c, _d = _b.userId, userId = _d === void 0 ? '' : _d;
        this.context = context;
        this.context = context;
        this.platform = platform;
        this.userId = userId;
    }
    BottenderSession.prototype.send = function (methods) {
        if (!lodash_1.default.isArray(methods)) {
            methods = [methods];
        }
        for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
            var obj = methods_1[_i];
            if (lodash_1.default.isString(obj) || !obj.method) {
                if (obj.text) {
                    obj = obj.text;
                }
                obj = {
                    method: 'sendText',
                    params: [obj]
                };
                switch (this.platform) {
                    case 'slack':
                        obj.method = 'postMessage';
                        break;
                    case 'telegram':
                        obj.method = 'sendMessage';
                        break;
                    case 'line':
                        obj.method = 'replyText';
                        break;
                }
            }
            var params = obj.params;
            if (this.userId) {
                params = __spreadArrays([this.userId], params);
            }
            this.context[obj.method].apply(this.context, params);
        }
    };
    Object.defineProperty(BottenderSession.prototype, "message", {
        get: function () {
            return {
                source: this.platform || this.context.platform,
                agent: 'bottender',
                user: this.user
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BottenderSession.prototype, "user", {
        get: function () {
            if (this.userId) {
                return {
                    id: this.userId
                };
            }
            return this.context.session.user;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BottenderSession.prototype, "source", {
        get: function () {
            return this.message.source;
        },
        enumerable: true,
        configurable: true
    });
    return BottenderSession;
}());
exports.BottenderSession = BottenderSession;
