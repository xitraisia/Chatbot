"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = __importDefault(require("crypto"));
var lodash_1 = __importDefault(require("lodash"));
var request_promise_1 = __importDefault(require("request-promise"));
var uri = 'https://api.twitter.com/1.1';
var uriUpload = 'https://upload.twitter.com/1.1';
var TwitterSession = /** @class */ (function () {
    function TwitterSession(config, body) {
        this.config = config;
        this.body = body;
        this.text = '';
        this.userId = '';
        this.platform = 'twitter';
        this.oauth = {
            consumer_key: config.consumerKey,
            consumer_secret: config.consumerSecret,
            token: config.accessToken,
            token_secret: config.accessTokenSecret
        };
        this.appId = config.accessToken.split('-')[0];
        this.body = body;
        this._parse();
    }
    TwitterSession.prototype.send = function (messageData) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, size, type, category, url, mediaId, contentData, ret;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (lodash_1.default.isString(messageData)) {
                            messageData = {
                                text: messageData
                            };
                        }
                        if (!messageData.attachment) return [3 /*break*/, 4];
                        _a = messageData._data, size = _a.size, type = _a.type, category = _a.category, url = _a.url;
                        return [4 /*yield*/, request_promise_1.default.post({
                                url: uriUpload + "/media/upload.json?command=INIT&total_bytes=" + size + "&media_types=" + type + "&media_category=" + category,
                                oauth: this.oauth,
                                headers: {
                                    'content-type': 'application/x-www-form-urlencoded'
                                }
                            })];
                    case 1:
                        mediaId = (_b.sent()).media_id;
                        return [4 /*yield*/, request_promise_1.default({
                                url: url,
                                encoding: 'binary'
                            })];
                    case 2:
                        contentData = _b.sent();
                        return [4 /*yield*/, request_promise_1.default.post({
                                url: uriUpload + "/media/upload.json?command=APPEND&media_id=" + mediaId + "&media=" + contentData + "&segment_index=0",
                                oauth: this.oauth
                            })];
                    case 3:
                        ret = _b.sent();
                        console.log(ret);
                        _b.label = 4;
                    case 4: return [4 /*yield*/, request_promise_1.default.post({
                            url: uri + "/direct_messages/events/new.json",
                            oauth: this.oauth,
                            headers: {
                                'content-type': 'application/json'
                            },
                            json: true,
                            body: {
                                event: {
                                    type: 'message_create',
                                    message_create: {
                                        target: {
                                            recipient_id: this.userId
                                        },
                                        message_data: messageData
                                    }
                                }
                            }
                        })];
                    case 5: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    TwitterSession.prototype._parse = function () {
        var dms = this.body.direct_message_events;
        if (!dms) {
            return;
        }
        for (var _i = 0, dms_1 = dms; _i < dms_1.length; _i++) {
            var dm = dms_1[_i];
            var message = dm.message_create;
            var messageData = message.message_data, userId = message.sender_id;
            if (this.appId == userId)
                continue;
            this.text = messageData.text;
            this.userId = userId;
        }
    };
    Object.defineProperty(TwitterSession.prototype, "message", {
        get: function () {
            return {
                source: this.platform,
                agent: this.platform
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TwitterSession.prototype, "source", {
        get: function () {
            return this.message.source;
        },
        enumerable: true,
        configurable: true
    });
    return TwitterSession;
}());
exports.TwitterSession = TwitterSession;
function TwitterCRCToken(config, _a) {
    var _b = _a.crc_token, crc_token = _b === void 0 ? '' : _b;
    if (crc_token) {
        var hash = crypto_1.default.createHmac('sha256', config.consumerSecret).update(crc_token).digest('base64');
        return {
            response_token: 'sha256=' + hash
        };
    }
    else {
        throw new Error('Error: crc_token missing from request.');
    }
}
exports.TwitterCRCToken = TwitterCRCToken;
