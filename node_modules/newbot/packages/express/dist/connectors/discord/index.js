"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var connector_1 = require("../connector");
var newbot_sessions_1 = require("newbot-sessions");
var discord_js_1 = __importDefault(require("discord.js"));
var DiscordConnector = /** @class */ (function (_super) {
    __extends(DiscordConnector, _super);
    function DiscordConnector(app, converse, settings) {
        var _this = _super.call(this, app, converse, settings) || this;
        _this.client = new discord_js_1.default.Client();
        return _this;
    }
    DiscordConnector.prototype.handler = function (msg) {
        if (msg.channel.type !== 'text')
            return;
        if (msg.author.id == this.settings.appId)
            return;
        var session = new newbot_sessions_1.DiscordSession(msg);
        return this.exec(msg.content, session);
    };
    DiscordConnector.prototype.event = function (event, user) {
        if (user.id == this.settings.appId)
            return;
        user.author = user;
        var session = new newbot_sessions_1.DiscordSession(user);
        return _super.prototype.event.call(this, event, session);
    };
    DiscordConnector.prototype.registerRoutes = function () {
        var _this = this;
        if (!this.settings.accessToken) {
            return;
        }
        this.client.login(this.settings.accessToken);
        this.client.on('message', this.handler.bind(this));
        this.client.on('messageReactionAdd', function (messageReaction, user) {
            _this.event({
                name: 'messageReactionAdd',
                data: messageReaction
            }, user);
        });
    };
    DiscordConnector.prototype.proactive = function (obj) {
        // TODO
    };
    return DiscordConnector;
}(connector_1.Connector));
exports.DiscordConnector = DiscordConnector;
