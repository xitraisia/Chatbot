"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var connector_1 = require("../connector");
var socket_io_1 = __importDefault(require("socket.io"));
var http_1 = __importDefault(require("http"));
var newbot_sessions_1 = require("newbot-sessions");
var sessions_1 = __importDefault(require("../../memory/sessions"));
var WebConnector = /** @class */ (function (_super) {
    __extends(WebConnector, _super);
    function WebConnector(app, converse, settings) {
        var _this = _super.call(this, app, converse, settings) || this;
        var io = _this.app.get('_io');
        if (io) {
            _this.io = io;
        }
        return _this;
    }
    WebConnector.prototype.handler = function (socket, input) {
        var event = input.event;
        var session = new newbot_sessions_1.WebSession(socket);
        sessions_1.default.set(session.user.id, session);
        if (event) {
            return this.event(event, session);
        }
        return this.exec(input, session);
    };
    WebConnector.prototype.registerRoutes = function () {
        var _this = this;
        var server;
        if (!this.io) {
            server = new http_1.default.Server(this.app);
            this.io = socket_io_1.default(server);
        }
        this.io.on('connection', function (socket) {
            socket.on('join-room', function (room) {
                socket.join(room);
            });
            socket.on('message', function (data) {
                _this.handler(socket, data);
            });
            socket.on('disconnect', function () {
                sessions_1.default.delete(socket.id);
            });
        });
        return server;
    };
    WebConnector.prototype.proactive = function (obj) {
        if (obj.room) {
            this.io.to(obj.room).emit('message', obj.data);
        }
        else {
            var session = _super.prototype.proactive.call(this, obj);
            session.send(obj.data);
        }
    };
    return WebConnector;
}(connector_1.Connector));
exports.WebConnector = WebConnector;
