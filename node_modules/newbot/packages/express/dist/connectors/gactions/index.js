"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var connector_1 = require("../connector");
var gactions = __importStar(require("actions-on-google"));
var newbot_sessions_1 = require("newbot-sessions");
var lodash_1 = __importDefault(require("lodash"));
var GactionsConnector = /** @class */ (function (_super) {
    __extends(GactionsConnector, _super);
    function GactionsConnector(app, converse, settings) {
        var _this = _super.call(this, app, converse, settings) || this;
        _this.propClientId = 'platforms.gactions.signin.clientId';
        _this.clientId = lodash_1.default.get(settings, _this.propClientId);
        _this.action = gactions.actionssdk({
            clientId: _this.clientId
        });
        return _this;
    }
    GactionsConnector.prototype.handler = function (conv, input, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.type, type = _c === void 0 ? 'exec' : _c, _d = _b.signin, signin = _d === void 0 ? {} : _d, _e = _b.userData, userData = _e === void 0 ? {} : _e;
        var session = new newbot_sessions_1.GactionsSession(gactions, conv);
        if (type == 'exec') {
            return this.exec(input, session);
        }
        return this.event({
            name: input,
            data: {
                profile: userData,
                signin: signin
            }
        }, session);
    };
    GactionsConnector.prototype.registerRoutes = function () {
        this.action.intent('actions.intent.MAIN', this.handler.bind(this));
        this.action.intent('actions.intent.TEXT', this.handler.bind(this));
        this.action.intent('actions.intent.OPTION', this.handleOption.bind(this));
        this.action.intent('actions.intent.SIGN_IN', this.handleSignin.bind(this));
        this.app.post(this.settings.path || '/gactions', this.action);
    };
    GactionsConnector.prototype.proactive = function (obj) {
        // TODO
    };
    GactionsConnector.prototype.handleOption = function (conv, params, option) {
        return this.handler(conv, option);
    };
    GactionsConnector.prototype.handleSignin = function (conv, params, signin) {
        var propName = 'platforms.gactions.signin.event';
        var eventName = lodash_1.default.get(this.settings, propName);
        if (!eventName) {
            throw '[Gactions] Please, add event name in "' + propName + '" property in "newbot.config.js"';
        }
        if (!this.clientId) {
            throw '[Gactions] Please, add client Id "' + this.propClientId + '" property in "newbot.config.js"';
        }
        return this.handler(conv, eventName, {
            type: 'event',
            signin: signin,
            userData: conv.user.profile.payload
        });
    };
    return GactionsConnector;
}(connector_1.Connector));
exports.GactionsConnector = GactionsConnector;
