"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var sessions_1 = __importDefault(require("../memory/sessions"));
var url_1 = require("url");
var Connector = /** @class */ (function () {
    function Connector(app, converse, settings) {
        this.app = app;
        this.settings = settings;
        this.platform = '';
        this.converse = global['converse'] || converse;
    }
    Connector.prototype.routePath = function (baseUrl) {
        if (baseUrl === void 0) { baseUrl = ''; }
        var path = '';
        if (this.settings.baseUrl) {
            var url = new url_1.URL(this.settings.baseUrl);
            path = this.settings.baseUrl.replace(url.origin, '');
        }
        return (baseUrl || path) + (this.settings.path || '/') + this.platform.toLowerCase();
    };
    Connector.prototype.exec = function (text, session) {
        return this.converse.exec(text, session.user.id, this.output(session));
    };
    Connector.prototype.event = function (event, session) {
        return this.converse.event(event.name, event.data, session.user.id, this.output(session));
    };
    Connector.prototype.output = function (session) {
        return Object.assign({}, {
            output: function (str, next) {
                var ret = session.send(str);
                if (ret && ret.then) {
                    ret.then(next);
                    return;
                }
                next();
            },
            data: {
                session: session,
                webview: function (url, data) {
                    if (data === void 0) { data = {}; }
                    var btoa = function (str) { return Buffer.from(str).toString('base64'); };
                    var params = encodeURIComponent(btoa(JSON.stringify(data)));
                    url += "?data=" + params + "&webview=true";
                    if (!url.startsWith('http')) {
                        url = process.env.SERVER_URL + url;
                    }
                    return url;
                }
            }
        }, this.settings.output);
    };
    Connector.prototype.proactive = function (obj) {
        var id = obj.id;
        if (!id) {
            throw 'The id parameter (session id) is missing';
        }
        if (!sessions_1.default.has(id)) {
            throw 'Unable to find the session in memory';
        }
        return sessions_1.default.get(id);
    };
    return Connector;
}());
exports.Connector = Connector;
