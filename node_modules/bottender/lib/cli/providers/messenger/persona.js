"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPersona = createPersona;
exports.listPersona = listPersona;
exports.getPersona = getPersona;
exports.deletePersona = deletePersona;
exports.default = main;

var _cliTable = _interopRequireDefault(require("cli-table3"));

var _chalk = _interopRequireDefault(require("chalk"));

var _invariant = _interopRequireDefault(require("invariant"));

var _messagingApiMessenger = require("messaging-api-messenger");

var _getConfig = _interopRequireDefault(require("../../shared/getConfig"));

var _getSubArgs = _interopRequireDefault(require("../sh/utils/getSubArgs"));

var _log = require("../../shared/log");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable consistent-return */
const help = () => {
  console.log(`
  bottender messenger persona <command> [option]

  ${_chalk.default.dim('Commands:')}

    list              List all personas.
    create            Create a new persona with name and profile picture url.
    get               Get persona by persona ID.
    del, delete       Delete persona by persona ID.

  ${_chalk.default.dim('Options:')}

    -t, --token       Specify Messenger access token.
    --name            Specify persona's name when create
    --pic             Specify persona's profile image url when create
    --id              Specify persona's ID to get or delete

  ${_chalk.default.dim('Examples:')}

  ${_chalk.default.dim('-')} Create a new persona

    ${_chalk.default.cyan('$ bottender messenger persona create --name <PERSONA_NAME> --pic <PROFILE_IMAGE_URL>')}

  ${_chalk.default.dim('-')} Get persona by ID

    ${_chalk.default.cyan('$ bottender messenger persona get --id <PERSONA_ID>')}

  ${_chalk.default.dim('-')} Delete persona with specific access token

    ${_chalk.default.cyan('$ bottender messenger persona delete --token <ACCESS_TOKEN> --id <PERSONA_ID>')}
`);
};

async function createPersona(ctx) {
  const token = ctx.argv['--token'];
  const personaName = ctx.argv['--name'];
  const personaUrl = ctx.argv['--pic'];
  let accessToken;

  try {
    if (token) {
      accessToken = token;
    } else {
      const config = (0, _getConfig.default)('bottender.config.js', 'messenger');
      (0, _invariant.default)(config.accessToken, 'accessToken is not found in config file');
      accessToken = config.accessToken;
    }

    (0, _invariant.default)(personaName, 'Name is not specified!!');
    (0, _invariant.default)(personaUrl, 'Profile picture url is not specified!!');

    const client = _messagingApiMessenger.MessengerClient.connect(accessToken);

    const persona = {
      name: personaName,
      profile_picture_url: personaUrl
    };
    const personaID = await client.createPersona(persona);
    (0, _log.print)(`Successfully create ${(0, _log.bold)('persona')} ${(0, _log.bold)(personaID.id)}`);
  } catch (err) {
    (0, _log.error)(`Failed to create ${(0, _log.bold)('persona')}`);

    if (err.response) {
      (0, _log.error)(`status: ${(0, _log.bold)(err.response.status)}`);

      if (err.response.data) {
        (0, _log.error)(`data: ${(0, _log.bold)(JSON.stringify(err.response.data, null, 2))}`);
      }
    } else {
      (0, _log.error)(err.message);
    }

    return process.exit(1);
  }
}

async function listPersona(ctx) {
  const token = ctx.argv['--token'];
  let accessToken;

  try {
    if (token) {
      accessToken = token;
    } else {
      const config = (0, _getConfig.default)('bottender.config.js', 'messenger');
      (0, _invariant.default)(config.accessToken, 'accessToken is not found in config file');
      accessToken = config.accessToken;
    }

    const client = _messagingApiMessenger.MessengerClient.connect(accessToken);

    const personas = await client.getAllPersonas();

    if (personas.length !== 0) {
      (0, _log.print)('Personas');
      const table = new _cliTable.default({
        head: ['id', 'name', 'image url'],
        colWidths: [30, 30, 30]
      });
      personas.forEach(item => {
        table.push([item.id, item.name, item.profile_picture_url]);
      });
      console.log(table.toString()); // eslint-disable-line no-console
    } else {
      (0, _log.print)('No personas are found.');
    }
  } catch (err) {
    (0, _log.error)(`Failed to list ${(0, _log.bold)('personas')}`);

    if (err.response) {
      (0, _log.error)(`status: ${(0, _log.bold)(err.response.status)}`);

      if (err.response.data) {
        (0, _log.error)(`data: ${(0, _log.bold)(JSON.stringify(err.response.data, null, 2))}`);
      }
    } else {
      (0, _log.error)(err.message);
    }

    return process.exit(1);
  }
}

async function getPersona(ctx) {
  const token = ctx.argv['--token'];
  const personaId = ctx.argv['--id'];
  let accessToken;

  try {
    if (token) {
      accessToken = token;
    } else {
      const config = (0, _getConfig.default)('bottender.config.js', 'messenger');
      (0, _invariant.default)(config.accessToken, 'accessToken is not found in config file');
      accessToken = config.accessToken;
    }

    (0, _invariant.default)(personaId, 'Persona ID is not specified!!');

    const client = _messagingApiMessenger.MessengerClient.connect(accessToken);

    const persona = await client.getPersona(personaId);

    if (persona !== undefined) {
      (0, _log.print)(`Information of persona ${(0, _log.bold)(personaId)}:`);
      (0, _log.print)(`Name: ${(0, _log.bold)(persona.name)}`);
      (0, _log.print)(`Profile picture: ${(0, _log.bold)(persona.profile_picture_url)}`);
    } else {
      (0, _log.print)(`Cannot get persona of ID ${(0, _log.bold)(personaId)}`);
    }
  } catch (err) {
    (0, _log.error)(`Failed to get ${(0, _log.bold)('persona')} of ID ${(0, _log.bold)(personaId)}`);

    if (err.response) {
      (0, _log.error)(`status: ${(0, _log.bold)(err.response.status)}`);

      if (err.response.data) {
        (0, _log.error)(`data: ${(0, _log.bold)(JSON.stringify(err.response.data, null, 2))}`);
      }
    } else {
      (0, _log.error)(err.message);
    }

    return process.exit(1);
  }
}

async function deletePersona(ctx) {
  const token = ctx.argv['--token'];
  const personaId = ctx.argv['--id'];
  let accessToken;

  try {
    if (token) {
      accessToken = token;
    } else {
      const config = (0, _getConfig.default)('bottender.config.js', 'messenger');
      (0, _invariant.default)(config.accessToken, 'accessToken is not found in config file');
      accessToken = config.accessToken;
    }

    (0, _invariant.default)(personaId, 'Persona ID is not specified!!');

    const client = _messagingApiMessenger.MessengerClient.connect(accessToken);

    const res = await client.deletePersona(personaId);

    if (res.success === true || res.success === 'true') {
      (0, _log.print)(`Sucessfully delete persona of ID ${(0, _log.bold)(personaId)}`);
    } else {
      (0, _log.print)(`Cannot get persona of ID ${(0, _log.bold)(personaId)}`);
    }
  } catch (err) {
    (0, _log.error)(`Failed to delete ${(0, _log.bold)('persona')} of ID ${(0, _log.bold)(personaId)}`);

    if (err.response) {
      (0, _log.error)(`status: ${(0, _log.bold)(err.response.status)}`);

      if (err.response.data) {
        (0, _log.error)(`data: ${(0, _log.bold)(JSON.stringify(err.response.data, null, 2))}`);
      }
    } else {
      (0, _log.error)(err.message);
    }

    return process.exit(1);
  }
}

async function main(ctx) {
  const subcommand = ctx.argv._[2];
  ctx.argv = (0, _getSubArgs.default)(ctx.argv, {
    '--token': String,
    '-t': '--token',
    '--name': String,
    '--pic': String,
    '--id': String
  });

  switch (subcommand) {
    case 'create':
      return createPersona(ctx);

    case 'list':
      return listPersona(ctx);

    case 'get':
      return getPersona(ctx);

    case 'delete':
    case 'del':
      return deletePersona(ctx);

    default:
      (0, _log.error)(`Please specify a valid subcommand: create, list, get, delete`);
      help();
  }
}