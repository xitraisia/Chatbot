'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

var _axios = require('axios');var _axios2 = _interopRequireDefault(_axios);
var _debug = require('debug');var _debug2 = _interopRequireDefault(_debug);
var _lodash = require('lodash.omit');var _lodash2 = _interopRequireDefault(_lodash);
var _urlJoin = require('url-join');var _urlJoin2 = _interopRequireDefault(_urlJoin);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


















const debugRequest = (0, _debug2.default)('messaging-api-slack');

function onRequest({ method, url, body }) {
  debugRequest(`${method} ${url}`);
  debugRequest('Outgoing request body:');
  debugRequest(JSON.stringify(body, null, 2));
}

class SlackWebhookClient {
  static connect(urlOrConfig) {
    return new SlackWebhookClient(urlOrConfig);
  }





  constructor(urlOrConfig) {
    let url;
    if (urlOrConfig && typeof urlOrConfig === 'object') {
      const config = urlOrConfig;

      url = config.url;
      this._onRequest = config.onRequest || onRequest;
    } else {
      url = urlOrConfig;
      this._onRequest = onRequest;
    }

    // incoming webhooks
    // https://api.slack.com/incoming-webhooks
    this._axios = _axios2.default.create({
      baseURL: url,
      headers: { 'Content-Type': 'application/json' } });


    this._axios.interceptors.request.use(config => {
      this._onRequest({
        method: config.method,
        url: (0, _urlJoin2.default)(config.baseURL, config.url),
        headers: _extends({},
        config.headers.common,
        config.headers[config.method],
        (0, _lodash2.default)(config.headers, [
        'common',
        'get',
        'post',
        'put',
        'patch',
        'delete',
        'head'])),


        body: config.data });

      return config;
    });
  }

  get axios() {
    return this._axios;
  }

  sendRawBody(body) {
    return this._axios.post('', body).then(res => res.data);
  }

  sendText(text) {
    return this.sendRawBody({ text });
  }

  /**
     * Attachments
     *
     * https://api.slack.com/docs/message-attachments
     */

  sendAttachments(
  attachments)
  {
    return this.sendRawBody({ attachments });
  }

  sendAttachment(
  attachment)
  {
    return this.sendAttachments([attachment]);
  }}exports.default = SlackWebhookClient;